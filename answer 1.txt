Answer 1:
By using the simple for loop.
By using the sorting algorithm.
By using the hashing.
By using the indexOf() method.//Import packages   
import java.util.*;   
  
//Creating RemoveDuplicatesExample1 class  
class RemoveDuplicatesExample1    
{   
    //Creating removeDuplicates() method to remove duplicates from array  
    static void removeDuplicate(char str[], int length)   
    {   
        //Creating index variable to use it as index in the modified string   
        int index = 0;   
    
        // Traversing character array  
        for (int i = 0; i < length; i++)   
        {   
              
            // Check whether str[i] is present before or not   
            int j;   
            for (j = 0; j < i; j++)    
            {   
                if (str[i] == str[j])   
                {   
                    break;   
                }   
            }   
    
            // If the character is not present before, add it to resulting string   
            if (j == i)    
            {   
                str[index++] = str[i];   
            }   
        }   
        System.out.println(String.valueOf(Arrays.copyOf(str, index)));   
    }   
    
    // main() method starts  
    public static void main(String[] args)   
    {   
        String info = "javaTpoint is the best learning website";  
        //Converting string to character array  
        char str[] = info.toCharArray();  
        //Calculating length of the character array  
        int len = str.length;   
        //Calling removeDuplicates() method to remove duplicate characters  
        removeDuplicate(str, len);   
    }   
} 
// 2) By using sorting
//Import packages   
import java.util.Arrays;   
//Create RemoveDuplicatesExample2 class   
public class RemoveDuplicatesExample2    
{   
    //Create removeDuplicates() method to remove duplicate characters from sorted array  
    static void removeDuplicates(String str)   
    {   
        //index to track the location of next character(Input string)  
        int index1 = 1;          
          
        // index to track the location of next character(Resultant string)  
        int index2 = 1;  
            
        // Convert string to character array for further manipulation  
        char arr[] = str.toCharArray();   
            
        //Check whether the character is present before it or not. If it is not present before, add it to the result string  
        while (index1 != arr.length)   
        {   
            if(arr[index1] != arr[index1-1])   
            {   
                arr[index2] = arr[index1];   
                index2++;   
            }   
            index1++;   
              
        }   
        
        str = new String(arr);  
        System.out.println(str.substring(0, index2));   
    }   
         
    //Create sortString() method to sort string  
    static String sortString(String str)   
    {   
       // Convert string to character array to sort it   
       char temp[] = str.toCharArray();   
         
       //sort array using array's sort () method  
       Arrays.sort(temp);   
         
       //Generate a new string from character array   
       str = new String(temp);   
           
       // Return the sorted string  
       return str;   
    }   
         
    // main() method start  
    public static void main(String[] args)   
    {   
        //create string variable with a default string   
        String str = "javaTpoint is the best learning site";   
          
        //Call sortString() method to sort the strign characters  
        String newString = sortString(str);  
        System.out.println(newString);  
          
        //Call removeDuplicates() method to remove duplicates from the sorted string  
        removeDuplicates(newString);  
    }   
}  
3) by using hashing
//Import classes and packages  
import Java.util.*;   
  
//Create RemoveDuplicatesExample3 for removing duplicate characters  
class RemoveDuplicatesExample3   
{   
    //Create removeDuplicates() method for removing duplicates using LinkedHashSet  
    static void removeDuplicates(String str)   
    {     
        //Create LinkedHashSet of type character   
        LinkedHashSet<Character> set = new LinkedHashSet<>();   
        //Add each character of the string into LinkedHashSet   
        for(int i=0;i<str.length();i++)   
            set.add(str.charAt(i));   
            
        // print the string after removing duplicate characters   
        for(Character ch : set)   
            System.out.print(ch);   
    }   
        
    //main() method start  
    public static void main(String args[])   
    {   
        //Create string variable with default value  
        String str = "javaTpoint is the best learning website";   
        //removeDuplicates() method by passing the string as an argument   
        removeDuplicates(str);   
    }   
}  
4)By using indexOf() method
// import classes and packages   
import java.util.*;   
  
//Create RemoveDuplicatesExample4 class to remove duplicates from the string   
class RemoveDuplicatesExample4 {   
        
    // Create removeDuplicates() method to remove duplicates using indexOf() method  
    public static void removeDuplicates(String str)   
    {   
        //Create an empty string   
        String newstr = new String();   
          
        //calculate length of the original string  
        int length = str.length();   
            
        // Traverse the string and check for the repeated characters   
        for (int i = 0; i < length; i++)    
        {   
            // store the character available at ith index in the string  
            char charAtPosition = str.charAt(i);   
                
            // check the index of the charAtPosition. If the indexOf() method returns true add it to the resuting string  
            if (newstr.indexOf(charAtPosition) < 0)   
            {   
                newstr += charAtPosition;   
            }   
        }   
        //Print string after removing duplicate characters   
        System.out.println(newstr);  
    }   
    
    // main() method start  
    public static void main(String[] args)   
    {   
        // Create a string variable with default value   
        String str = "JavaTpoint is the best learning website";   
        //call removeDuplicates() method for removing duplicate characters    
        removeDuplicates(str);   
    }   
}  ********************************************************************************************************************


answer 2

public class DuplicateCharacters {  
     public static void main(String[] args) {  
        String string1 = "Great responsibility";  
        int count;  
          
        //Converts given string into character array  
        char string[] = string1.toCharArray();  
          
        System.out.println("Duplicate characters in a given string: ");  
        //Counts each character present in the string  
        for(int i = 0; i <string.length; i++) {  
            count = 1;  
            for(int j = i+1; j <string.length; j++) {  
                if(string[i] == string[j] && string[i] != ' ') {  
                    count++;  
                    //Set string[j] to 0 to avoid printing visited character  
                    string[j] = '0';  
                }  
            }  
            //A character is considered as duplicate if count is greater than 1  
            if(count > 1 && string[i] != '0')  
                System.out.println(string[i]);  
        }  
    }  
}  

**************************************************************************************************************
answer 3)

class Main {
  public static void main(String[] args) {

    String str = "Radar", reverseStr = "";
    
    int strLength = str.length();

    for (int i = (strLength - 1); i >=0; --i) {
      reverseStr = reverseStr + str.charAt(i);
    }

    if (str.toLowerCase().equals(reverseStr.toLowerCase())) {
      System.out.println(str + " is a Palindrome String.");
    }
    else {
      System.out.println(str + " is not a Palindrome String.");
    }
  }
}********************************************************************************
answer 4)

// Java Program to count vowels, consonant, digits and 
// special character in a given string 
import java.io.*; 

public class GFG { 

	// Function to count number of vowels, consonant, 
	// digitsand special character in a string. 
	static void countCharacterType(String str) 
	{ 
		// Declare the variable vowels, consonant, digit 
		// and special characters 
		int vowels = 0, consonant = 0, specialChar = 0, 
			digit = 0; 
	
		// str.length() function to count number of 
		// character in given string. 
		for (int i = 0; i < str.length(); i++) { 
			
			char ch = str.charAt(i); 
	
			if ( (ch >= 'a' && ch <= 'z') || 
				(ch >= 'A' && ch <= 'Z') ) { 
	
				// To handle upper case letters 
				ch = Character.toLowerCase(ch); 
	
				if (ch == 'a' || ch == 'e' || ch == 'i' || 
					ch == 'o' || ch == 'u') 
					vowels++; 
				else
					consonant++; 
			} 
			else if (ch >= '0' && ch <= '9') 
				digit++; 
			else
				specialChar++; 
		} 
		
		System.out.println("Vowels: " + vowels); 
		System.out.println("Consonant: " + consonant); 
		System.out.println("Digit: " + digit); 
		System.out.println("Special Character: " + specialChar); 
	} 
	
	// Driver function. 
	static public void main (String[] args) 
	{ 
		String str = "geeks for geeks121"; 
		
		countCharacterType(str); 
	} 
} 

// This code is contributed by vt_m. 
************************************************************************************
answer 5)

import java.util.Arrays;

class Main {
  public static void main(String[] args) {
    String str1 = "Race";
    String str2 = "Care";
    
    str1 = str1.toLowerCase();
    str2 = str2.toLowerCase();

    // check if length is same
    if(str1.length() == str2.length()) {

      // convert strings to char array
      char[] charArray1 = str1.toCharArray();
      char[] charArray2 = str2.toCharArray();

      // sort the char array
      Arrays.sort(charArray1);
      Arrays.sort(charArray2);

      // if sorted char arrays are same
      // then the string is anagram
      boolean result = Arrays.equals(charArray1, charArray2);

      if(result) {
        System.out.println(str1 + " and " + str2 + " are anagram.");
      }
      else {
        System.out.println(str1 + " and " + str2 + " are not anagram.");
      }
    }
    else {
      System.out.println(str1 + " and " + str2 + " are not anagram.");
    }
  }
}
**************************************************************************************************
answer 6)

// Java Program to illustrate Pangram

import java.io.*;

class GFG {

	// Returns true if the string
	// is pangram else false
	public static boolean checkPangram(String str)
	{
		// Create a hash table to mark the
		// characters present in the string
		// By default all the elements of
		// mark would be false.
		boolean[] mark = new boolean[26];

		// For indexing in mark[]
		int index = 0;

		// Traverse all characters
		for (int i = 0; i < str.length(); i++) {
			// If uppercase character, subtract 'A'
			// to find index.
			if ('A' <= str.charAt(i)
				&& str.charAt(i) <= 'Z')
				index = str.charAt(i) - 'A';

			// If lowercase character, subtract 'a'
			// to find index.
			else if ('a' <= str.charAt(i)
					&& str.charAt(i) <= 'z')

				index = str.charAt(i) - 'a';

			// If this character is other than english
			// lowercase and uppercase characters.
			else
				continue;
			mark[index] = true;
		}

		// Return false if any character is unmarked
		for (int i = 0; i <= 25; i++)
			if (mark[i] == false)
				return (false);

		// If all characters were present
		return (true);
	}

	// Driver Code
	public static void main(String[] args)
	{
		String str
			= "The quick brown fox jumps over the lazy dog";

		if (checkPangram(str) == true)
			System.out.print(str + " \nis a pangram.");
		else
			System.out.print(str + " \nis not a pangram.");
	}
}
*******************************************************************************************
answer 7)

// Java program to illustrate string with
// unique characters using brute force technique
import java.util.*;

class GfG {
	boolean uniqueCharacters(String str)
	{
		// If at any time we encounter 2 same
		// characters, return false
		for (int i = 0; i < str.length(); i++)
			for (int j = i + 1; j < str.length(); j++)
				if (str.charAt(i) == str.charAt(j))
					return false;

		// If no duplicate characters encountered,
		// return true
		return true;
	}

	public static void main(String args[])
	{
		GfG obj = new GfG();
		String input = "GeeksforGeeks";

		if (obj.uniqueCharacters(input))
			System.out.println("The String " + input + " has all unique characters");
		else
			System.out.println("The String " + input + " has duplicate characters");
	}
}
************************************************************************************************************
answer 8)

public class Characters   
{  
     public static void main(String[] args) {  
        String str = "grass is greener on the other side";  
        int[] freq = new int[str.length()];  
        char minChar = str.charAt(0), maxChar = str.charAt(0);  
        int i, j, min, max;          
          
        //Converts given string into character array  
        char string[] = str.toCharArray();  
          
        //Count each word in given string and store in array freq  
        for(i = 0; i < string.length; i++) {  
            freq[i] = 1;  
            for(j = i+1; j < string.length; j++) {  
                if(string[i] == string[j] && string[i] != ' ' && string[i] != '0') {  
                    freq[i]++;  
                      
                    //Set string[j] to 0 to avoid printing visited character  
                    string[j] = '0';  
                }  
            }  
        }  
          
        //Determine minimum and maximum occurring characters  
        min = max = freq[0];  
        for(i = 0; i <freq.length; i++) {  
              
            //If min is greater than frequency of a character   
            //then, store frequency in min and corresponding character in minChar  
            if(min > freq[i] && freq[i] != '0') {  
                min = freq[i];  
                minChar = string[i];  
            }  
            //If max is less than frequency of a character   
            //then, store frequency in max and corresponding character in maxChar  
            if(max < freq[i]) {  
                max = freq[i];  
                maxChar = string[i];  
            }  
        }  
          
        System.out.println("Minimum occurring character: " + minChar);  
        System.out.println("Maximum occurring character: " + maxChar);  
    }  
}  